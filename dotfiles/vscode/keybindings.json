// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "shift+alt+h",
        "command": "noop"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "shift+alt+w",
        "command": "workbench.action.terminal.kill",
        "when": "!terminalEditorFocus && terminalFocus"
    },
    {
        "key": "ctrl+alt+f",
        "command": "revealFileInOS",
        "when": "!editorFocus"
    },
    {
        "key": "shift+alt+r",
        "command": "-revealFileInOS",
        "when": "!editorFocus"
    },
    {
        "key": "shift+alt+0",
        "command": "-workbench.action.toggleEditorGroupLayout"
    },
    {
        "key": "shift+alt+=",
        "command": "workbench.action.toggleMaximizedPanel",
        "when": "panelFocus"
    },
    {
        "key": "shift+alt+y shift+alt+y",
        "command": "workbench.action.copyEditorToNewWindow",
        "when": "activeEditor"
    },
    {
        "key": "shift+alt+w",
        "command": "workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus"
    },
    {
        "key": "alt+enter",
        "command": "runCommands",
        "args": {
            "commands": [
                {
                    "command": "breadcrumbs.selectFocused",
                },
                {
                    "command": "list.select",
                },
                {
                    "command": "workbench.action.focusActiveEditorGroup",
                }
            ]
        },
        "when": "breadcrumbsActive && breadcrumbsVisible && !listFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "shift+alt+w",
        "command": "workbench.action.closeActiveEditor",
        "when": "!focusedView && !terminalFocus && !activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "shift+alt+o",
        "command": "-editor.action.organizeImports",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
    },
    {
        "key": "shift+alt+m",
        "command": "runCommands",
        "args": {
            "commands": [
                {
                    "command": "markdown.showPreviewToSide",
                },
                {
                    "command": "workbench.action.focusFirstEditorGroup",
                },
                {
                    "command": "workbench.action.focusFirstEditorGroup",
                },
                {
                    "command": "workbench.action.focusFirstEditorGroup",
                }
            ]
        },
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "shift+alt+h",
        "command": "workbench.action.focusPreviousGroup",
        "when": "!focusedView && !inReferenceEditor && !referenceSearchVisible && activeEditorGroupIndex != '1'"
    },
    {
        "key": "ctrl+shift+h",
        "command": "references-view.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider"
    },
    {
        "key": "shift+alt+h",
        "command": "-references-view.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider"
    },
    {
        "key": "ctrl+shift+h",
        "command": "editor.showIncomingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showIncomingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'"
    },
    {
        "key": "ctrl+shift+h",
        "command": "editor.showOutgoingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showOutgoingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'"
    },
    {
        "key": "ctrl+shift+h",
        "command": "editor.showSubtypes",
        "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showSubtypes",
        "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'"
    },
    {
        "key": "ctrl+shift+h",
        "command": "editor.showSupertypes",
        "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showSupertypes",
        "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'"
    },
    {
        "key": "shift+alt+l",
        "command": "workbench.action.focusNextGroup",
        "when": "!focusedView && !inReferenceEditor && !referenceSearchVisible && !activeEditorGroupLast"
    },
    {
        "key": "shift+alt+s",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "sideBarFocus"
    },
    {
        "key": "shift+alt+\\",
        "command": "workbench.action.terminal.split",
        "when": "!terminalEditorFocus && (terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile)"
    },
    {
        "key": "n",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "shift+alt+k",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!isInDiffEditor && !inKeybindings"
    },
    {
        "key": "shift+alt+e",
        "command": "workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "l",
        "command": "list.selectAndPreserveFocus",
        "when": "listFocus && !treeElementCanExpand && !inputFocus && !treeElementHasChild && !treestickyScrollFocused"
    },
    {
        "key": "l",
        "command": "-list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
    },
    {
        "key": "shift+alt+f",
        "command": "-notebook.formatCell",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "shift+alt+f",
        "command": "-notebook.format",
        "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "shift+alt+0",
        "command": "codesnap.start"
    },
    {
        "key": "ctrl+alt+k",
        "command": "keybindings.editor.recordSearchKeys",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "alt+k",
        "command": "-keybindings.editor.recordSearchKeys",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "alt+j",
        "command": "extension.vim_down",
        "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible && vim.mode == 'CommandlineInProgress'"
    },
    {
        "key": "alt+j",
        "command": "history.showNext",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidget && !suggestWidgetVisible"
    },
    {
        "key": "alt+j",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+j",
        "command": "notifications.focusNextToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "alt+j",
        "command": "scm.viewNextCommit",
        "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "alt+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+j",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible && !suggestWidgetVisible"
    },
    {
        "key": "alt+j",
        "command": "workbench.banner.focusNextAction",
        "when": "bannerFocused"
    },
    {
        "key": "alt+j",
        "command": "workbench.statusBar.focusNext",
        "when": "statusBarFocused"
    },
    {
        "key": "alt+k",
        "command": "extension.vim_up",
        "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible && vim.mode == 'CommandlineInProgress'"
    },
    {
        "key": "alt+k",
        "command": "history.showPrevious",
        "when": "historyNavigationBackwardsEnabled && historyNavigationWidget && !suggestWidgetVisible"
    },
    {
        "key": "alt+k",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+k",
        "command": "notifications.focusPreviousToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "alt+k",
        "command": "scm.viewPreviousCommit",
        "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "alt+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+k",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible && !suggestWidgetVisible"
    },
    {
        "key": "alt+k",
        "command": "workbench.banner.focusPreviousAction",
        "when": "bannerFocused"
    },
    {
        "key": "alt+k",
        "command": "workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
    },
    {
        "key": "ctrl+k ctrl+f",
        "command": "-editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k f2",
        "command": "-togglePeekWidgetFocus",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+alt+f",
        "command": "-filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "alt+enter",
        "command": "rest-client.request",
        "when": "editorTextFocus && editorLangId == 'http'"
    },
    {
        "key": "shift+alt+.",
        "command": "-editor.action.autoFix",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
    },
    {
        "key": "shift+alt+r",
        "command": "workbench.action.terminal.rename",
        "when": "terminalFocus || terminalTabsFocus"
    },
    {
        "key": "shift+alt+r",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+h",
        "command": "togglePeekWidgetFocus",
        "when": "listFocus && (inReferenceSearchEditor || referenceSearchVisible)"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFile",
        "when": "true"
    },
    {
        "key": "shift+alt+p",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "alt+l",
        "command": "quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "shift+alt+'",
        "command": "workbench.action.terminal.openDetectedLink",
        "when": "terminalFocus"
    },
    {
        "key": "shift+alt+f",
        "command": "editor.action.formatDocument",
        "when": "!editorHasSelection && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
        "key": "shift+alt+f",
        "command": "editor.action.formatDocument.none",
        "when": "!editorHasSelection && editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
    },
    {
        "key": "shift+alt+f",
        "command": "editor.action.formatSelection",
        "when": "editorHasSelection && editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+enter",
        "command": "workbench.action.switchWindow"
    },
    {
        "key": "shift+alt+=",
        "command": "workbench.action.toggleFullScreen",
        "when": "activeEditor && !panelFocus"
    },
    {
        "key": "l",
        "command": "list.expand",
        "when": "listFocus && treeElementCanExpand && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "h",
        "command": "-list.collapse",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "h",
        "command": "list.collapse",
        "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "alt+;",
        "command": "breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "alt+,",
        "command": "breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "k",
        "command": "breadcrumbs.selectEditor",
        "when": "breadcrumbsActive && breadcrumbsVisible && !listFocus"
    },
    {
        "key": "alt+;",
        "command": "breadcrumbs.focus",
        "when": "breadcrumbsPossible && breadcrumbsVisible && !breadcrumbsActive"
    },
    {
        "key": "shift+alt+f",
        "command": "list.find",
        "when": "listFocus && listSupportsFind"
    },
    {
        "key": "shift+alt+'",
        "command": "editor.action.openLink",
        "when": "!terminalFocus"
    },
    {
        "key": "shift+alt+`",
        "command": "workbench.action.terminal.openNativeConsole"
    },
    {
        "key": "shift+alt+k",
        "command": "keybindings.editor.recordSearchKeys",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "shift+alt+i",
        "command": "-editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "o",
        "command": "explorer.newFolder",
        "when": "filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "shift+alt+\\",
        "command": "workbench.action.splitEditorToRightGroup",
        "when": "!focusedView"
    },
    {
        "key": "ctrl+shift+\\",
        "command": "-editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+\\",
        "command": "workbench.action.splitEditorToLeftGroup",
        "when": "!focusedView"
    },
    {
        "key": "shift+alt+1",
        "command": "-workbench.action.moveEditorToFirstGroup"
    },
    {
        "key": "shift+alt+9",
        "command": "-workbench.action.moveEditorToLastGroup"
    },
    {
        "key": "shift+alt+right",
        "command": "workbench.action.moveEditorToRightGroup",
        "when": "!focusedView"
    },
    {
        "key": "shift+alt+left",
        "command": "workbench.action.moveEditorToLeftGroup",
        "when": "!focusedView"
    },
    {
        "key": "shift+alt+up",
        "command": "workbench.action.moveEditorToAboveGroup",
        "when": "!focusedView"
    },
    {
        "key": "shift+alt+down",
        "command": "workbench.action.moveEditorToBelowGroup",
        "when": "!focusedView"
    },
    {
        "key": "ctrl+shift+-",
        "command": "workbench.action.splitEditorToAboveGroup",
        "when": "!focusedView"
    },
    {
        "key": "shift+alt+-",
        "command": "workbench.action.splitEditorToBelowGroup",
        "when": "!focusedView"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-notebook.cell.split",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputInputFocused"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "shift+alt+s",
        "command": "workbench.action.focusSideBar",
        "when": "!sideBarFocus"
    },
    {
        "key": "shift+alt+[",
        "command": "editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "key": "shift+alt+]",
        "command": "editor.action.referenceSearch.trigger",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "key": "shift+alt+l",
        "command": "togglePeekWidgetFocus",
        "when": "editorTextFocus && inReferenceSearchEditor || editorTextFocus && referenceSearchVisible"
    },
    {
        "key": "shift+alt+backspace",
        "command": "editor.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "key": "space",
        "command": "openReference",
        "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
    },
    {
        "key": "shift+space",
        "command": "openReferenceToSide",
        "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
    },
    {
        "key": "alt+/",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+/",
        "command": "workbench.action.terminal.focusHover",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "alt+/",
        "command": "list.showHover",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "shift+alt+. alt+/",
        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "shift+alt+d",
        "command": "-editor.detectLanguage",
        "when": "editorTextFocus && !notebookEditable"
    },
    {
        "key": "shift+alt+d",
        "command": "-notebook.cell.detectLanguage",
        "when": "notebookCellEditable && notebookEditable"
    },
    {
        "key": "alt+l",
        "command": "workbench.action.nextEditorInGroup",
        "when": "!focusedView && !listFocus"
    },
    {
        "key": "alt+h",
        "command": "workbench.action.previousEditorInGroup",
        "when": "!focusedView && !listFocus"
    },
    {
        "key": "shift+alt+h",
        "command": "workbench.action.previousSideBarView",
        "when": "sideBarFocus"
    },
    {
        "key": "shift+alt+l",
        "command": "workbench.action.nextSideBarView",
        "when": "sideBarFocus"
    },
    {
        "key": "shift+alt+g",
        "command": "workbench.scm.action.focusNextResourceGroup"
    },
    {
        "key": "shift+alt+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+a",
        "command": "git.stage",
        "when": "!editorHasSelection"
    },
    {
        "key": "shift+alt+u",
        "command": "git.unstage"
    },
    {
        "key": "shift+alt+c",
        "command": "git.commit"
    },
    {
        "key": "shift+alt+c",
        "command": "-copyFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "shift+alt+c",
        "command": "-copyFilePath",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+k",
        "command": "diffEditor.switchSide",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+alt+a",
        "command": "git.stageSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress && editorHasSelection"
    },
    {
        "key": "alt+l",
        "command": "list.expand",
        "when": "listFocus && treeElementCanExpand && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "alt+h",
        "command": "list.collapse",
        "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "alt+l",
        "command": "list.selectAndPreserveFocus",
        "when": "listFocus && !inputFocus && !treeElementCanExpand && !treeElementHasChild && !treestickyScrollFocused"
    },
    {
        "key": "k",
        "command": "-list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "j",
        "command": "-list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "j",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "k",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+,",
        "command": "breadcrumbs.focus",
        "when": "breadcrumbsPossible && breadcrumbsVisible && !breadcrumbsActive"
    },
    {
        "key": "j",
        "command": "breadcrumbs.selectEditor",
        "when": "breadcrumbsActive && breadcrumbsVisible && !listFocus"
    },
    {
        "key": "alt+j",
        "command": "breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible && !listFocus"
    },
    {
        "key": "shift+alt+n",
        "command": "workbench.action.terminal.new",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "shift+alt+t",
        "command": "workbench.action.createTerminalEditor",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "enter",
        "command": "search.action.focusSearchList",
        "when": "searchInputBoxFocus"
    },
    {
        "key": "alt+l",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+w l",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+h",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+w h",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+alt+;",
        "command": "workbench.action.terminal.focusTabs",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "shift+alt+l",
        "command": "workbench.action.nextPanelView",
        "when": "panelFocus"
    },
    {
        "key": "shift+alt+h",
        "command": "workbench.action.previousPanelView",
        "when": "panelFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "workbench.action.quickOpenLeastRecentlyUsedEditor",
        "when": "!inQuickOpen"
    },
    {
        "key": "shift+alt+o",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditor",
        "when": "!inQuickOpen"
    },
    {
        "key": "shift+alt+o",
        "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "shift+alt+i",
        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.terminal.scrollDown",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.terminal.scrollUp",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "alt+;",
        "command": "workbench.action.terminal.scrollToNextCommand",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "alt+,",
        "command": "workbench.action.terminal.scrollToPreviousCommand",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "shift+alt+m",
        "command": "runCommands",
        "args": {
            "commands": [
                {
                    "command": "livePreview.start.internalPreview.atFile",
                },
                {
                    "command": "workbench.action.focusFirstEditorGroup",
                },
                {
                    "command": "workbench.action.focusFirstEditorGroup",
                },
                {
                    "command": "workbench.action.focusFirstEditorGroup",
                }
            ]
        },
        "when": "!notebookEditorFocused && editorLangId == 'html'"
    },
    {
        "key": "shift+alt+.",
        "command": "-editor.action.autoFix",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
    },
    {
        "key": "shift+alt+r",
        "command": "-remote-wsl.revealInExplorer",
        "when": "editorFocus && remoteName == 'wsl'"
    },
    {
        "key": "shift+alt+w",
        "command": "workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups && !focusedView"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible && vim.mode != 'CommandlineInProgress' && !suggestWidgetVisible && !parameterHintsVisible"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.editor.nextChange",
        "when": "editorTextFocus && !suggestWidgetVisible && !textCompareEditorActive && vim.mode != 'CommandlineInProgress' && !suggestWidgetVisible && !parameterHintsVisible"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.editor.previousChange",
        "when": "editorTextFocus && !suggestWidgetVisible && !textCompareEditorActive && vim.mode != 'CommandlineInProgress' && !suggestWidgetVisible && !parameterHintsVisible"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible && vim.mode != 'CommandlineInProgress' && !suggestWidgetVisible && !parameterHintsVisible"
    },
    {
        "key": "alt+h",
        "command": "-foam-vscode.open-daily-note-for-date"
    },
    {
        "key": "alt+d",
        "command": "-foam-vscode.open-daily-note"
    },
    {
        "key": "shift+alt+v",
        "command": "notifications.toggleList"
    },
    {
        "key": "d d",
        "command": "notification.clear",
        "when": "notificationFocus"
    },
    {
        "key": "alt+enter",
        "command": "notification.acceptPrimaryAction",
        "when": "notificationFocus"
    },
    {
        "key": "shift+alt+. shift+alt+p",
        "command": "workbench.debug.action.focusBreakpointsView"
    },
    {
        "key": "shift+alt+. shift+alt+o",
        "command": "workbench.debug.action.focusCallStackView"
    },
    {
        "key": "shift+alt+. shift+alt+u",
        "command": "workbench.debug.action.focusVariablesView"
    },
    {
        "key": "shift+alt+. shift+alt+i",
        "command": "workbench.debug.action.focusWatchView"
    },
    {
        "key": "shift+alt+. shift+alt+;",
        "command": "workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+alt+. shift+alt+,",
        "command": "workbench.action.debug.pause",
        "when": "debugState == 'running'"
    },
    {
        "key": "shift+alt+. shift+alt+h",
        "command": "workbench.action.debug.restart",
        "when": "inDebugMode"
    },
    {
        "key": "shift+alt+. shift+alt+j",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "shift+alt+. shift+alt+k",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+alt+. shift+alt+l",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+alt+. shift+alt+enter",
        "command": "workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "shift+alt+. shift+alt+enter",
        "command": "workbench.action.debug.selectandstart",
        "when": "debuggersAvailable && debugState == 'inactive'"
    },
    {
        "key": "shift+alt+j",
        "command": "workbench.action.togglePanel",
        "when": "panelFocus"
    },
    {
        "key": "shift+alt+. shift+alt+.",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "shift+alt+. shift+alt+/",
        "command": "editor.debug.action.conditionalBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "shift+alt+. shift+alt+n",
        "command": "editor.debug.action.triggerByBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "shift+alt+. shift+alt+'",
        "command": "editor.debug.action.editBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "shift+alt+. alt+j",
        "command": "editor.debug.action.goToNextBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "shift+alt+. alt+k",
        "command": "editor.debug.action.goToPreviousBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "shift+alt+. shift+alt+-",
        "command": "workbench.debug.viewlet.action.removeAllBreakpoints"
    },
    {
        "key": "shift+alt+. alt+enter",
        "command": "workbench.action.debug.start",
        "when": "debuggersAvailable && debugState == 'inactive'"
    },
    {
        "key": "ctrl+shift+b",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+shift+u",
        "command": "-workbench.action.output.toggleOutput",
        "when": "workbench.panel.output.active"
    },
    {
        "key": "shift+alt+b",
        "command": "workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "shift+alt+j",
        "command": "workbench.action.focusPanel",
        "when": "!panelFocus"
    },
    {
        "key": "shift+alt+y shift+alt+n",
        "command": "workbench.action.newWindow"
    },
    {
        "key": "shift+alt+y shift+alt+k",
        "command": "opensshremotes.openEmptyWindow"
    },
    {
        "key": "shift+alt+y shift+alt+l",
        "command": "workbench.action.remote.close",
        "when": "workbenchState == 'empty' && remoteName == 'wsl'"
    },
    {
        "key": "shift+alt+y shift+alt+j",
        "command": "remote-containers.reopenInContainer",
        "when": "remoteName != 'dev-container'"
    },
    {
        "key": "shift+alt+y shift+alt+j",
        "command": "remote-containers.reopenLocally",
        "when": "remoteName == 'dev-container'"
    },
    {
        "key": "shift+alt+y shift+alt+.",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "shift+alt+r",
        "command": "renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "c c",
        "command": "renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "y y",
        "command": "filesExplorer.copy",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "d d",
        "command": "deleteFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
    },
    {
        "key": "d d",
        "command": "moveFileToTrash",
        "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
    },
    {
        "key": "p",
        "command": "filesExplorer.paste",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
    },
    {
        "key": "x",
        "command": "filesExplorer.cut",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
    },
    {
        "key": "alt+h",
        "command": "workbench.action.quickInputBack",
        "when": "inQuickOpen"
    },
    {
        "key": "alt+;",
        "command": "workbench.action.quickPickManyToggle",
        "when": "inQuickOpen"
    },
    {
        "key": "shift+alt+y shift+alt+l",
        "command": "remote-wsl.reopenInWindows",
        "when": "remoteName == 'wsl' && workbenchState != 'empty'"
    },
    {
        "key": "a",
        "command": "copyFilePath",
        "when": "filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "r",
        "command": "copyRelativeFilePath",
        "when": "filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "command": "-copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+shift+b",
        "command": "-workbench.action.tasks.build",
        "when": "taskCommandsRegistered"
    },
    {
        "key": "shift+alt+y shift+alt+f",
        "command": "workbench.action.files.openFile"
    },
    {
        "key": "shift+alt+y shift+alt+l",
        "command": "remote-wsl.reopenFromRecommendation",
        "when": "workbenchState != 'empty' && remoteName != 'wsl'"
    },
    {
        "key": "shift+alt+y shift+alt+u",
        "command": "workbench.action.remote.close"
    },
    {
        "key": "shift+alt+y shift+alt+l",
        "command": "remote-wsl.connectUsingDistro",
        "when": "workbenchState == 'empty' && remoteName != 'wsl'"
    },
    {
        "key": "shift+alt+y shift+alt+o",
        "command": "workbench.action.files.openFolderInNewWindow"
    },
    {
        "key": "shift+alt+y shift+alt+a",
        "command": "workbench.action.addRootFolder"
    },
    {
        "key": "shift+alt+y shift+alt+s",
        "command": "workbench.action.saveWorkspaceAs"
    },
    {
        "key": "shift+alt+y shift+alt+;",
        "command": "remote-tunnels.connectNewWindowToTunnel"
    },
    {
        "key": "shift+alt+y shift+alt+m",
        "command": "workbench.action.openWorkspaceInNewWindow"
    },
    {
        "key": "shift+alt+y shift+alt+w",
        "command": "targetsWsl.focus"
    },
    {
        "key": "shift+alt+y shift+alt+d",
        "command": "targetsContainers.focus"
    },
    {
        "key": "shift+alt+y shift+alt+v",
        "command": "devVolumes.focus"
    },
    {
        "key": "shift+alt+y shift+alt+r",
        "command": "remoteTargets.focus"
    },
    {
        "key": "shift+alt+y shift+alt+p",
        "command": "workbench.action.remote.showMenu"
    },
    {
        "key": "shift+alt+y shift+alt+q",
        "command": "workbench.action.closeWindow"
    },
    {
        "key": "shift+alt+y shift+alt+g",
        "command": "remoteHub.continueOn.openRepository"
    },
    {
        "key": "shift+alt+y shift+alt+h",
        "command": "remoteHub.views.workspaceRepositories.focus"
    },
    {
        "key": "shift+alt+d shift+alt+k",
        "command": "vscode-docker.compose.up"
    },
    {
        "key": "shift+alt+d shift+alt+;",
        "command": "vscode-docker.containers.attachShell"
    },
    {
        "key": "shift+alt+d shift+alt+o",
        "command": "vscode-docker.configureCompose"
    },
    {
        "key": "shift+alt+d alt+7",
        "command": "vscode-docker.containers.inspect"
    },
    {
        "key": "shift+alt+d j",
        "command": "vscode-docker.containers.remove"
    },
    {
        "key": "shift+alt+d l",
        "command": "vscode-docker.containers.restart"
    },
    {
        "key": "shift+alt+d h",
        "command": "vscode-docker.containers.stop"
    },
    {
        "key": "shift+alt+d shift+alt+n",
        "command": "vscode-docker.configure"
    },
    {
        "key": "shift+alt+d shift+alt+m",
        "command": "vscode-docker.containers.browse"
    },
    {
        "key": "shift+alt+d alt+k",
        "command": "vscode-docker.images.build"
    },
    {
        "key": "shift+alt+d alt+h",
        "command": "vscode-docker.images.pull"
    },
    {
        "key": "shift+alt+d shift+alt+'",
        "command": "vscode-docker.containers.composeGroup.logs"
    },
    {
        "key": "shift+alt+d shift+alt+h",
        "command": "vscode-docker.containers.composeGroup.stop"
    },
    {
        "key": "shift+alt+d shift+alt+j",
        "command": "vscode-docker.compose.down"
    },
    {
        "key": "shift+alt+d shift+alt+l",
        "command": "vscode-docker.compose.restart"
    },
    {
        "key": "shift+alt+d alt+j",
        "command": "vscode-docker.images.remove"
    },
    {
        "key": "shift+alt+d alt+l",
        "command": "vscode-docker.images.push"
    },
    {
        "key": "shift+alt+d alt+y",
        "command": "vscode-docker.images.copyFullTag"
    },
    {
        "key": "shift+alt+d alt+8",
        "command": "vscode-docker.images.inspect"
    },
    {
        "key": "shift+alt+d shift+alt+8",
        "command": "dockerImages.focus"
    },
    {
        "key": "shift+alt+d shift+alt+9",
        "command": "dockerVolumes.focus"
    },
    {
        "key": "shift+alt+d shift+alt+0",
        "command": "dockerNetworks.focus"
    },
    {
        "key": "shift+alt+d shift+alt+-",
        "command": "dockerRegistries.focus"
    },
    {
        "key": "shift+alt+d shift+alt+=",
        "command": "vscode-docker.views.dockerContexts.focus"
    },
    {
        "key": "shift+alt+d 7",
        "command": "vscode-docker.containers.refresh"
    },
    {
        "key": "shift+alt+d alt+t",
        "command": "vscode-docker.images.tag"
    },
    {
        "key": "shift+alt+d k",
        "command": "vscode-docker.images.run"
    },
    {
        "key": "shift+alt+d alt+w",
        "command": "vscode-docker.images.prune"
    },
    {
        "key": "shift+alt+d ;",
        "command": "vscode-docker.images.runInteractive"
    },
    {
        "key": "shift+alt+d alt+9",
        "command": "vscode-docker.volumes.inspect"
    },
    {
        "key": "shift+alt+d alt+=",
        "command": "vscode-docker.contexts.inspect"
    },
    {
        "key": "shift+alt+d alt+-",
        "command": "vscode-docker.registries.inspectRemoteImageManifest"
    },
    {
        "key": "shift+alt+d alt+0",
        "command": "vscode-docker.networks.inspect"
    },
    {
        "key": "shift+alt+d '",
        "command": "vscode-docker.containers.viewLogs"
    },
    {
        "key": "shift+alt+d w",
        "command": "vscode-docker.containers.prune"
    },
    {
        "key": "shift+alt+d shift+alt+w",
        "command": "vscode-docker.pruneSystem"
    },
    {
        "key": "shift+alt+d 8",
        "command": "vscode-docker.images.refresh"
    },
    {
        "key": "shift+alt+d 9",
        "command": "vscode-docker.volumes.refresh"
    },
    {
        "key": "shift+alt+d 0",
        "command": "vscode-docker.networks.refresh"
    },
    {
        "key": "shift+alt+d -",
        "command": "vscode-docker.registries.refresh"
    },
    {
        "key": "shift+alt+d =",
        "command": "vscode-docker.contexts.refresh"
    },
    {
        "key": "shift+alt+d shift+alt+s",
        "command": "workbench.view.extension.dockerView"
    },
    {
        "key": "shift+alt+d shift+alt+7",
        "command": "dockerContainers.focus"
    },
    {
        "key": "shift+alt+9",
        "command": "peacock.changeColorToFavorite"
    },
    {
        "key": "shift+alt+m",
        "command": "edit-csv.edit",
        "when": "!notebookEditorFocused && editorLangId == 'csv'"
    },
    {
        "key": "shift+alt+;",
        "command": "workbench.action.showOutputChannels",
        "when": "inOutput"
    },
    {
        "key": "shift+alt+;",
        "command": "editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive && !focusedView"
    },
    {
        "key": "shift+alt+,",
        "command": "editor.action.dirtydiff.previous",
        "when": "editorTextFocus && !textCompareEditorActive && !focusedView"
    },
    {
        "key": "shift+alt+. shift+alt+m",
        "command": "editor.debug.action.addLogPoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "ctrl+f",
        "command": "problems.action.focusFilter",
        "when": "focusedView == 'workbench.panel.markers.view' && !problemsFilterFocus"
    },
    {
        "key": "ctrl+f",
        "command": "-problems.action.focusFilter",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+f",
        "command": "problems.action.focusProblemsFromFilter",
        "when": "problemsFilterFocus"
    },
    {
        "key": "shift+alt+/",
        "command": "workbench.action.findInFiles"
    },
    {
        "key": "alt+;",
        "command": "refactorPreview.toggleCheckedState",
        "when": "listFocus && refactorPreview.enabled && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "enter",
        "command": "refactorPreview.apply",
        "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'"
    },
    {
        "key": "escape",
        "command": "refactorPreview.discard",
        "when": "refactorPreview.enabled && focusedView == 'refactorPreview'"
    },
    {
        "key": "ctrl+enter",
        "command": "acceptRenameInput",
        "when": "editorFocus && renameInputVisible && !isComposing"
    },
    {
        "key": "enter",
        "command": "-acceptRenameInput",
        "when": "editorFocus && renameInputVisible && !isComposing"
    },
    {
        "key": "enter",
        "command": "acceptRenameInputWithPreview",
        "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible && !isComposing"
    },
    {
        "key": "ctrl+enter",
        "command": "-acceptRenameInputWithPreview",
        "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible && !isComposing"
    }
]